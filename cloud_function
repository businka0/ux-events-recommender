import ydb
import os
import json
import urllib3
import random
import string

TG_TOKEN=os.getenv('TG_TOKEN')
URL = f"https://api.telegram.org/bot{TG_TOKEN}/"
http = urllib3.PoolManager(retries=False)

driver_config = ydb.DriverConfig(
    endpoint=os.getenv('YDB_ENDPOINT'),
    database=os.getenv('YDB_DATABASE'),
    credentials=ydb.iam.MetadataUrlCredentials()
)

driver = ydb.Driver(driver_config)
# Wait for the driver to become active for requests.
driver.wait(fail_fast=True, timeout=5)
# Create the session pool instance to manage YDB sessions.
pool = ydb.SessionPool(driver)

def send_message(text, chat_id):
    #final_text = "Ваше сообщение было: " + str(text)
    url = URL + f"sendMessage?text={text}&chat_id={chat_id}"
    http.request("GET", url)

def execute_query(text):
    return pool.retry_operation_sync(lambda s: s.transaction().execute(
        text,
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    ))

def randomword(length=10):
	letters = string.ascii_lowercase
	return ''.join(random.choice(letters) for i in range(length))

def check_user_exists(chat_id):
    text = f'''
        SELECT id, chat_id, name, fav_cat_list, fav_evnts FROM user
        WHERE chat_id == '{chat_id}'
        LIMIT 1;
        '''

    user_record = execute_query(text)[0].rows
    return user_record

def register_user(chat_id, name): 
    user_record_text = f'''
        INSERT INTO user
        SELECT CAST('{randomword()}' as Utf8?) as id,
                CAST('{chat_id}' as Utf8?) as chat_id,
                CAST('{name}' as Utf8?) as name;
        '''
    execute_query(user_record_text)
    return user_record


def handler(event, context):
    
    print(f"event == {json.dumps(event)}")
    message = json.loads(event['body'])
    chat_id = message['message']['from']['id']
    name = message['message']['from']['username']
    reply = message['message']['text']
    # Команда /start
    if reply == '/start':
        start_message = "Привет!\n\nЭто бот, который помогает экономить время на поиске нескучных событий и нестандартных мест, а также с его помощью ты сможешь отслеживать эти события."
        send_message(start_message, chat_id)

        user_record = check_user_exists(chat_id)
        print(user_record)
        if user_record  == [] :
            register_user(chat_id, name)
            user_record = check_user_exists(chat_id)

    elif reply == '/send_my_fav_cats':
        user_record = check_user_exists(chat_id)
        if user_record[0]['fav_cat_list'] == None:
            fav_cat_text = "Ты еще не отметил свои любимые категории"
            send_message(fav_cat_text, chat_id)
        else:
            print(user_record[0]['fav_cat_list'])

    elif reply == '/send_my_fav_evnts':
        user_record = check_user_exists(chat_id)
        if user_record[0]['fav_evnts'] == None:
            fav_evnts_text = "Ты еще не отметил ни одно событие как избранное. Хочешь посмотреть рекомендации?"
            send_message(fav_evnts_text, chat_id)
        else:
            print(user_record[0]['fav_evnts'])  
    else:
        else_text = "Другое"
        send_message(else_text, chat_id)


    return {
        'statusCode': 200,
    }
