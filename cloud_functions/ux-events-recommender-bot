import os
import json
import urllib3
import random
import string
import urllib.parse
import traceback
import re
from datetime import datetime, timedelta

TG_TOKEN=os.getenv('TG_TOKEN')
URL = f"https://api.telegram.org/bot{TG_TOKEN}/"
http = urllib3.PoolManager(retries=False)



def send_message(text, chat_id):
    #final_text = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ: " + str(text)
    url = URL + f"sendMessage?text={text}&chat_id={chat_id}"
    http.request("GET", url)

def send_photos(chat_id, photo_paths, text):
    params = {
        'chat_id': chat_id,
        'media': []
    }
    for i, path in enumerate(photo_paths):
        if i == 0:
            params['media'].append({'type': 'photo', 'media': path, 'caption': text, 'parse_mode': 'markdown'})
        else: 
            params['media'].append({'type': 'photo', 'media': path})
    params['media'] = json.dumps(params['media'])
    url = f'https://api.telegram.org/bot6618755723:AAFn6wepxDtSFm0qI4GPSvM_adv1B5bNZpM/sendMediaGroup' 
    http.request(
		'POST',
		url,
		fields=params
	)

def create_keyboard(event):
	return json.dumps(
		{
			"inline_keyboard":[
				[{ "text": "üëé", "callback_data": f"{event['id']}_no"},
				{ "text": "‚ù§Ô∏è", "callback_data": f"{event['id']}_yes"},
                { "text": "üìÖ", "callback_data": f"{event['id']}_calendar"}]
			]
		}
	)

def prepare_text(text: str):
    escape_chars = r"_*`["
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text) \
        .replace('    ', '\n') \
        .replace('"', "'")

def send_card(event, chat_id):
    # Create data dict
    start_time = datetime.utcfromtimestamp(event['start_time'] + 3600*3).strftime('%H:%M %d.%m %Y')
    event['text'] = prepare_text(event['text'])
    event['title'] = prepare_text(event['title'])


    data = {
        'photo': event['photo'],
        'caption': f"[{event['title']}](https://vk.com/public{event['id']}) \n{event['text'][:400]}... \n\n–ö–æ–≥–¥–∞: *{start_time}*",
        'chat_id': chat_id,
        'parse_mode': 'Markdown',
        'reply_markup': create_keyboard(event)
    }
    url = URL + "sendPhoto"
    print(data)
    http.request(
        'POST',
        url,
        fields=data
    )

def randomword(length=10):
	letters = string.ascii_lowercase
	return ''.join(random.choice(letters) for i in range(length))

def check_user_exists(chat_id):
    data = {'chat_id': chat_id}
    resp = http.request(
                    'GET',
                    url='https://d5drc14rr9vrs0e10g9b.apigw.yandexcloud.net/back_office/check_user',
                    fields=data
                    )
    return resp.json()['result']

def register_user(chat_id, name): 
    data = {'chat_id': chat_id, 'name': name}
    resp = http.request(
                    'GET',
                    url='https://d5drc14rr9vrs0e10g9b.apigw.yandexcloud.net/back_office/register_user',
                    fields=data
                    )
    return resp.json()['result']

def log_choice(chat_id, event_id, user_id, reply):
    review = reply == 'yes'
    data = {'chat_id': chat_id, 'event_id':event_id, 'user_id':user_id, 'user_review':review }
    resp = http.request(
                      'GET',
                      url='https://d5drc14rr9vrs0e10g9b.apigw.yandexcloud.net//back_office/log_choice',
                      fields=data
                      )
    print(resp.json()) 
    
def get_popular_events(city_id, count, user_id):
    data = {'city_id': city_id, 'count': count, 'user_id': user_id}
    resp = http.request(
                    'GET',
                    url='https://d5drc14rr9vrs0e10g9b.apigw.yandexcloud.net/back_office/get_popular_events',
                    fields=data
                    )
    return resp.json()['result']


# def get_similar_events(event_id, count):


def send_feedback(reply, chat_id, cbq_id):
    url = URL + f"answerCallbackQuery?callback_query_id={cbq_id}"
    http.request("GET", url)


def get_event(event_id):
    data = {'event_id': event_id}
    resp = http.request(
                    'GET',
                    url='https://d5drc14rr9vrs0e10g9b.apigw.yandexcloud.net/back_office/get_event',
                    fields=data
                    )
    return resp.json()['result']

def get_events(event_ids):
    data = {'event_ids[]': json.dumps(event_ids)}
    resp = http.request(
                    'GET',
                    url='https://d5drc14rr9vrs0e10g9b.apigw.yandexcloud.net/back_office/get_events',
                    fields=data
                    )
    return resp.json()['result']

def get_likes(user_id, count):
    data = {'user_id': user_id, 'count': count}
    resp = http.request(
                    'GET',
                    url='https://d5drc14rr9vrs0e10g9b.apigw.yandexcloud.net/back_office/get_likes',
                    fields=data
                    )
    return resp.json()['result']



def handler(event, context):
    try:
        print(f"event == {json.dumps(event)}")
        message = json.loads(event['body'])
        if 'callback_query' in message.keys():
            # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º, —á—Ç–æ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ
            # –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–Ω—é
            event_id, reply = message['callback_query']['data'].split('_')
            chat_id = message['callback_query']['message']['chat']['id']
            cbq_id = message['callback_query']['id']
            send_feedback(reply, chat_id, cbq_id)

            if reply == 'calendar': 
                
                evnt_record = get_event(event_id) 
                data = {'chat_id': chat_id, 'title': evnt_record['title'], 'text': evnt_record['text'], 'start_time': evnt_record['start_time']}
                resp = http.request(
                    'GET',
                    url='https://d5drc14rr9vrs0e10g9b.apigw.yandexcloud.net/back_office/get_ics_file',
                    fields=data
                    )
                
            else: 
              user_record = check_user_exists(chat_id)
              print(user_record)
              if user_record  == [] :
                  register_user(chat_id, name)
                  user_record = check_user_exists(chat_id)

              log_choice(chat_id, event_id, user_record[0]['id'], reply)
              # –æ–±–Ω–æ–≤–ª—è–µ–º
              event = get_popular_events(2, 1, user_record[0]['id'])[0]
              send_card(event, chat_id)
        else:
            chat_id = message['message']['from']['id']
            name = message['message']['from']['username']
            reply = message['message']['text']

            # –ö–æ–º–∞–Ω–¥–∞ /start
            if reply == '/start':
                start_message = "–ü—Ä–∏–≤–µ—Ç!\n\nn–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫–µ –Ω–µ—Å–∫—É—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç, –∞ —Ç–∞–∫–∂–µ —Å –µ–≥–æ –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è.! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/browse_events - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é, –º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è –∏–ª–∏ –Ω–µ—Ç - —ç—Ç–æ —É–ª—É—á—à–∏—Ç —Ç–≤–æ—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é!–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å üìÖ –∏ —Å–æ–∑–¥–∞—Ç—å .ics —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å,—á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å:)\n\n/get_recs -- —Å–æ–±—Ä–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è ‚ù§Ô∏è —Å–æ–±—ã—Ç–∏–π \n\n/get_popular_events --  —É–≤–∏–¥–µ—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"
                send_message(start_message, chat_id)

                # event_rec = get_event()
                # send_message_card(event_rec['title'], event_rec['photo'], chat_id)

                user_record = check_user_exists(chat_id)
                print(user_record)
                if user_record  == [] :
                    register_user(chat_id, name)
                    user_record = check_user_exists(chat_id)
            
            elif reply == '/get_popular_events':
                user_record = check_user_exists(chat_id)
                events = get_popular_events(2, 5, user_record[0]['id'])
                start_time = [datetime.utcfromtimestamp(e['start_time'] + 3600*3).strftime('%H:%M %d.%m %Y') for e in events]
                send_photos(chat_id, 
                    [e['photo'] for e in events], 
                    '\n'.join([
                        f"""[{prepare_text(e['title'])}](https://vk.com/public{e['id']}) \n\n {prepare_text(e['text'])[:50]}... \n–ö–æ–≥–¥–∞: *{t}*\n""" 
                        for e, t in zip(events, start_time)
                    ])
                )
            
            elif reply == '/get_recs':
                user_record = check_user_exists(chat_id)
                event_likes = get_likes(user_record[0]['id'], 5)
                print(f'Event likes object:{event_likes}')
                data = {'events[]': list(map(lambda x: int(x), event_likes))}
                print(f'Data object:{data}')
                resp = http.request(
                    'GET',
                    url='https://d5drc14rr9vrs0e10g9b.apigw.yandexcloud.net/get_recs',
                    fields=data
                    )
                print(resp.json())
                event_ids = resp.json()['events']
                print(event_ids)
                events = get_events(event_ids)
                print(events)
                start_time = [datetime.utcfromtimestamp(e['start_time'] + 3600*3).strftime('%H:%M %d.%m %Y') for e in events]
                send_photos(chat_id, 
                    [e['photo'] for e in events], 
                    '\n'.join([
                        f"""[{prepare_text(e['title'])}](https://vk.com/public{e['id']}) \n\n {prepare_text(e['text'])[:50]}... \n–ö–æ–≥–¥–∞: *{t}*\n""" 
                        for e, t in zip(events, start_time)
                    ])
                )
            

            elif reply == '/browse_events':
                user_record = check_user_exists(chat_id)
                event_record = get_popular_events(2, 1, user_record[0]['id'])[0]
                print(event_record['title'])
                send_card(event_record, chat_id)
            
            else:
                else_text = "–î—Ä—É–≥–æ–µ"
                send_message(else_text, chat_id)
        return {
            'statusCode': 200,
        }
    except:
        traceback.print_exc()
    finally:
        return {
            'statusCode': 200,
        }
